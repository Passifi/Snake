     1                                      bits 16
     2                                      org 0x100
     3                                  %include "macros.asm"
     4                              <1> SCREEN_WIDTH equ 320 
     5                              <1> SETCOLORREGISTER_CMD equ 0x1010
     6                              <1> SetColorRegisterBlock equ 0x1012 
     7                              <1> VGA_SCREEN_MEMORY equ 0xA000
     8                              <1> VGA_TEXT_BUFFER equ 0xB800
     9                              <1> VGA_STATUS_PORT equ 0x03DA
    10                              <1> VGA_RETRACE equ 0x08
    11                              <1> VGA_IRQ equ 0x10 
    12                              <1> VGA_TEXT_MODE equ 0x03 
    13                              <1> MODE_13 equ 0x0013
    14                              <1> DOS_WAIT_FOR_KEY_CMD equ 0x07
    15                              <1> DOS_STD_OUT_CHR equ 0x02 ;use DL for character value 
    16                              <1> DOS_EXIT_CMD equ 0x4c
    17                              <1> DOS_MEM_ALLOC_CMD equ 0x48 ; bx number of paragraphs (16bytes) ax has the segment address
    18                              <1> DOS_FREE_MEM_CMD equ 0x49 
    19                              <1> DOS_GET_INT_VEC equ 0x00
    20                              <1> DOS_SET_INT_VEC equ 0x25 ; AL carries the int number and DS:DX should contain the interrupt handler 
    21                              <1> 
    22                              <1> DOS_IRQ equ 0x21 
    23                              <1> DOS_READ_FILE equ 0x3f  ; BX files handle, cx number of byte to read ;ds:dx address buffer
    24                              <1> DOS_OPEN_FILE equ 0x3d00 ; al access control ah irq request, ds:dx pointer to filename
    25                              <1> OPEN_ACCESS_READWRITE equ 0x02 ; 
    26                              <1> 
    27                              <1> KB_PORT equ 0x60
    28                              <1> KB_ACK equ 0x20
    29                              <1> %macro Exit 0 
    30                              <1>     mov ah, DOS_EXIT_CMD
    31                              <1>     int DOS_IRQ
    32                              <1> %endm 
    33                              <1> 
    34                              <1> %macro Free 0 
    35                              <1>     mov es, ax 
    36                              <1>     mov ah, DOS_FREE_MEM_CMD
    37                              <1>     int DOS_IRQ
    38                              <1> %endm 
    39                              <1> 
    40                              <1> %macro cls 0
    41                              <1>     mov ah, DOS_STD_OUT_CHR 
    42                              <1>     mov dl, 27 
    43                              <1>     int DOS_IRQ
    44                              <1>     mov dl,'[' 
    45                              <1>     int DOS_IRQ
    46                              <1>     mov dl,'2' 
    47                              <1>     int DOS_IRQ 
    48                              <1>     mov dl,'J' 
    49                              <1>     int DOS_IRQ
    50                              <1> %endm 
     4                                  Col equ 80
     5                                  Row equ 25
     6                                  Block_ASC equ 219
     7                                  Green_Txt equ 0x0a00 
     8                                  %macro SetChar 2  
     9                                    push ax
    10                                      push ds 
    11                                      mov bx, VGA_TEXT_BUFFER 
    12                                      mov ds,bx 
    13                                      call convertPosition
    14                                      mov bx,ax 
    15                                      mov ax, %1|%2 
    16                                      mov [bx],ax
    17                                      pop ds 
    18                                    pop ax 
    19                                  
    20                                  %endm     
    21                                  
    22                                  start:
    23 00000000 8D06[D400]                  lea ax, timer 
    24 00000004 89C3                        mov bx,ax 
    25 00000006 B42C                        mov ah, 0x2c 
    26 00000008 CD21                        int DOS_IRQ    
    27 0000000A 8837                        mov [bx],dh 
    28 0000000C E89D00                      call clearScreen
    29 0000000F B81010                      mov ax, 0x1010
    30                                      
    31                                  .loop: 
    32 00000012 50                          push ax 
    33                                  .timeLoop: 
    34 00000013 B42C                          mov ah, 0x2c 
    35 00000015 CD21                          int DOS_IRQ
    36 00000017 8A26[D400]                    mov ah,[timer]  
    37 0000001B 52                            push dx 
    38 0000001C 28E6                          sub dh,ah 
    39 0000001E 80FE01                        cmp dh, 1  
    40 00000021 5A                            pop dx
    41 00000022 7CEF                          jl .timeLoop
    42 00000024 8D1E[D400]                  lea bx, timer 
    43 00000028 8837                        mov [bx],dh 
    44 0000002A 58                          pop ax 
    45 0000002B 50                          push ax 
    46                                      SetChar Green_Txt,Block_ASC
     9 0000002C 50                  <1>  push ax
    10 0000002D 1E                  <1>  push ds
    11 0000002E BB00B8              <1>  mov bx, VGA_TEXT_BUFFER
    12 00000031 8EDB                <1>  mov ds,bx
    13 00000033 E81500              <1>  call convertPosition
    14 00000036 89C3                <1>  mov bx,ax
    15 00000038 B8DB0A              <1>  mov ax, %1|%2
    16 0000003B 8907                <1>  mov [bx],ax
    17 0000003D 1F                  <1>  pop ds
    18 0000003E 58                  <1>  pop ax
    19                              <1> 
    47 0000003F 58                          pop ax 
    48 00000040 FEC4                        inc ah 
    49 00000042 80FC18                      cmp ah,24 
    50 00000045 75CB                        jnz .loop 
    51                                      Exit
    30 00000047 B44C                <1>  mov ah, DOS_EXIT_CMD
    31 00000049 CD21                <1>  int DOS_IRQ
    52                                  
    53                                  convertPosition: ; ax contains x in al and y in ah  
    54 0000004B 51                          push cx 
    55 0000004C 88E1                        mov cl, ah
    56 0000004E D0E0                        shl al,1 
    57 00000050 80F900                      cmp cl,0 
    58 00000053 7409                        jz .endOfFunc 
    59 00000055 30E4                        xor ah,ah
    60                                  .loop: 
    61 00000057 05A000                      add ax,160 
    62 0000005A FEC9                        dec cl 
    63 0000005C 75F9                        jnz .loop 
    64                                  .endOfFunc:
    65 0000005E 59                          pop cx
    66 0000005F C3                          ret 
    67                                       
    68                                  DrawLineH: ; ax contains starting position, cx should contain length  
    69                                  .loop:
    70                                      SetChar Green_Txt, Block_ASC
     9 00000060 50                  <1>  push ax
    10 00000061 1E                  <1>  push ds
    11 00000062 BB00B8              <1>  mov bx, VGA_TEXT_BUFFER
    12 00000065 8EDB                <1>  mov ds,bx
    13 00000067 E8E1FF              <1>  call convertPosition
    14 0000006A 89C3                <1>  mov bx,ax
    15 0000006C B8DB0A              <1>  mov ax, %1|%2
    16 0000006F 8907                <1>  mov [bx],ax
    17 00000071 1F                  <1>  pop ds
    18 00000072 58                  <1>  pop ax
    19                              <1> 
    71 00000073 FEC0                        inc al 
    72 00000075 49                          dec cx
    73 00000076 75E8                        jnz .loop 
    74 00000078 C3                          ret 
    75                                  
    76                                  DrawLineV: ; ax start (ah:y, al:x), cx: length  
    77                                    .loop:
    78                                    SetChar Green_Txt, Block_ASC
     9 00000079 50                  <1>  push ax
    10 0000007A 1E                  <1>  push ds
    11 0000007B BB00B8              <1>  mov bx, VGA_TEXT_BUFFER
    12 0000007E 8EDB                <1>  mov ds,bx
    13 00000080 E8C8FF              <1>  call convertPosition
    14 00000083 89C3                <1>  mov bx,ax
    15 00000085 B8DB0A              <1>  mov ax, %1|%2
    16 00000088 8907                <1>  mov [bx],ax
    17 0000008A 1F                  <1>  pop ds
    18 0000008B 58                  <1>  pop ax
    19                              <1> 
    79 0000008C FEC4                      inc ah 
    80 0000008E 49                        dec cx 
    81 0000008F 75E8                      jnz .loop 
    82 00000091 C3                        ret 
    83                                  
    84                                  
    85                                  drawDiagonal:
    86 00000092 B91400                      mov cx, 20 
    87 00000095 B400                        mov ah,0
    88 00000097 B000                        mov al,0 
    89                                  .loop:
    90 00000099 50                          push ax 
    91 0000009A E8AEFF                      call convertPosition
    92 0000009D 89C3                        mov bx,ax
    93 0000009F B8DB0A                      mov ax, 0x0A00|Block_ASC
    94 000000A2 8907                        mov [bx],ax 
    95 000000A4 58                          pop ax 
    96 000000A5 050101                      add ax, 0x0101 
    97 000000A8 49                          dec cx 
    98 000000A9 75EE                        jnz .loop
    99 000000AB C3                          ret
   100                                  
   101                                  clearScreen:
   102 000000AC 1E                        push ds 
   103 000000AD 53                          push bx 
   104 000000AE BB00B8                        mov bx, VGA_TEXT_BUFFER 
   105 000000B1 8EDB                          mov ds,bx 
   106 000000B3 5B                          pop bx
   107 000000B4 51                          push cx
   108 000000B5 50                            push ax 
   109 000000B6 B800B8                          mov ax, VGA_TEXT_BUFFER
   110 000000B9 8EC0                            mov es, ax 
   111 000000BB B9D007                          mov cx, 80*25 
   112 000000BE B80000                          mov ax, 0 
   113 000000C1 89C7                            mov di, ax 
   114 000000C3 B80000                          mov ax, 0x0 
   115 000000C6 F3AB                            rep stosw
   116 000000C8 58                            pop ax
   117 000000C9 59                          pop cx 
   118 000000CA 1F                        pop ds 
   119 000000CB C3                        ret 
   120                                   
   121                                  .data:
   122 000000CC 0000                      QHead: dw 0x000  
   123 000000CE 0000                      QTail: dw 0x000 
   124 000000D0 FF00                      Vector: db -1,0 
   125 000000D2 1010                      Pos: dw 0x1010
   126 000000D4 00                        timer: db 0x00
   127 000000D5 0000<rep 7D0h>            SnakeQueue: times 80*25 dw 0x00
   128                                  
