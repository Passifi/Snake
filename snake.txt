     1                                      bits 16
     2                                      org 0x100
     3                                  %include "macros.asm"
     4                              <1> SCREEN_WIDTH equ 320 
     5                              <1> SETCOLORREGISTER_CMD equ 0x1010
     6                              <1> SetColorRegisterBlock equ 0x1012 
     7                              <1> VGA_SCREEN_MEMORY equ 0xA000
     8                              <1> VGA_TEXT_BUFFER equ 0xB800
     9                              <1> VGA_STATUS_PORT equ 0x03DA
    10                              <1> VGA_RETRACE equ 0x08
    11                              <1> VGA_IRQ equ 0x10 
    12                              <1> VGA_TEXT_MODE equ 0x03 
    13                              <1> MODE_13 equ 0x0013
    14                              <1> DOS_WAIT_FOR_KEY_CMD equ 0x07
    15                              <1> DOS_STD_OUT_CHR equ 0x02 ;use DL for character value 
    16                              <1> DOS_EXIT_CMD equ 0x4c
    17                              <1> DOS_MEM_ALLOC_CMD equ 0x48 ; bx number of paragraphs (16bytes) ax has the segment address
    18                              <1> DOS_FREE_MEM_CMD equ 0x49 
    19                              <1> DOS_GET_INT_VEC equ 0x00
    20                              <1> DOS_SET_INT_VEC equ 0x25 ; AL carries the int number and DS:DX should contain the interrupt handler 
    21                              <1> 
    22                              <1> DOS_IRQ equ 0x21 
    23                              <1> DOS_READ_FILE equ 0x3f  ; BX files handle, cx number of byte to read ;ds:dx address buffer
    24                              <1> DOS_OPEN_FILE equ 0x3d00 ; al access control ah irq request, ds:dx pointer to filename
    25                              <1> OPEN_ACCESS_READWRITE equ 0x02 ; 
    26                              <1> 
    27                              <1> KB_PORT equ 0x60
    28                              <1> KB_ACK equ 0x20
    29                              <1> %macro Exit 0 
    30                              <1>     mov ah, DOS_EXIT_CMD
    31                              <1>     int DOS_IRQ
    32                              <1> %endm 
    33                              <1> 
    34                              <1> %macro Free 0 
    35                              <1>     mov es, ax 
    36                              <1>     mov ah, DOS_FREE_MEM_CMD
    37                              <1>     int DOS_IRQ
    38                              <1> %endm 
    39                              <1> 
    40                              <1> %macro cls 0
    41                              <1>     mov ah, DOS_STD_OUT_CHR 
    42                              <1>     mov dl, 27 
    43                              <1>     int DOS_IRQ
    44                              <1>     mov dl,'[' 
    45                              <1>     int DOS_IRQ
    46                              <1>     mov dl,'2' 
    47                              <1>     int DOS_IRQ 
    48                              <1>     mov dl,'J' 
    49                              <1>     int DOS_IRQ
    50                              <1> %endm 
     4                                  Up_Key equ 72 
     5                                  Right_Key equ 77 
     6                                  Left_Key equ 75 
     7                                  Down_Key equ 80
     8                                  Col equ 80
     9                                  Row equ 25
    10                                  Block_ASC equ 219
    11                                  Green_Txt equ 0x0a00 
    12                                  %macro SetChar 2  
    13                                    push ax
    14                                      push ds 
    15                                      mov bx, VGA_TEXT_BUFFER 
    16                                      mov ds,bx 
    17                                      call convertPosition
    18                                      mov bx,ax 
    19                                      mov ax, %1|%2 
    20                                      mov [bx],ax
    21                                      pop ds 
    22                                    pop ax 
    23                                  
    24                                  %endm     
    25                                  
    26                                  start:
    27 00000000 E8F500                      call InstallKB 
    28 00000003 8D06[7601]                  lea ax, timer 
    29 00000007 89C3                        mov bx,ax 
    30 00000009 B42C                        mov ah, 0x2c 
    31 0000000B CD21                        int DOS_IRQ    
    32 0000000D 8837                        mov [bx],dh 
    33 0000000F E8C200                      call clearScreen
    34 00000012 B81010                      mov ax, 0x1010
    35                                  .loop:
    36 00000015 50                          push ax 
    37                                      SetChar Green_Txt,Block_ASC
    13 00000016 50                  <1>  push ax
    14 00000017 1E                  <1>  push ds
    15 00000018 BB00B8              <1>  mov bx, VGA_TEXT_BUFFER
    16 0000001B 8EDB                <1>  mov ds,bx
    17 0000001D E85300              <1>  call convertPosition
    18 00000020 89C3                <1>  mov bx,ax
    19 00000022 B8DB0A              <1>  mov ax, %1|%2
    20 00000025 8907                <1>  mov [bx],ax
    21 00000027 1F                  <1>  pop ds
    22 00000028 58                  <1>  pop ax
    23                              <1> 
    38 00000029 A0[6901]                    mov al,[controlByte]
    39 0000002C 3C4D                        cmp al, Right_Key
    40 0000002E 750A                        jnz .leftTest
    41 00000030 C606[6901]00                mov byte [controlByte],0
    42 00000035 58                          pop ax 
    43 00000036 FEC0                        inc al
    44 00000038 EBDB                        jmp .loop
    45                                  .leftTest:
    46 0000003A 3C4B                      cmp al, Left_Key 
    47 0000003C 750A                      jnz .UpTest 
    48 0000003E C606[6901]00              mov byte [controlByte],0
    49 00000043 58                        pop ax 
    50 00000044 FEC8                      dec al
    51 00000046 EBCD                      jmp .loop
    52                                  .UpTest:
    53 00000048 3C48                      cmp al, Up_Key
    54 0000004A 750A                      jnz .DownTest
    55 0000004C C606[6901]00              mov byte [controlByte],0
    56 00000051 58                        pop ax 
    57 00000052 FECC                      dec ah
    58 00000054 EBBF                      jmp .loop
    59                                  .DownTest:
    60 00000056 3C50                      cmp al, Down_Key 
    61 00000058 750A                      jnz .exitTest
    62 0000005A C606[6901]00              mov byte [controlByte],0
    63 0000005F 58                        pop ax 
    64 00000060 FEC4                      inc ah
    65 00000062 EBB1                      jmp .loop
    66                                  .exitTest:
    67 00000064 A0[6701]                    mov al,[Quit] 
    68 00000067 3C01                        cmp al,1
    69                                      
    70 00000069 58                          pop ax  
    71 0000006A 75A9                        jnz .loop
    72 0000006C E8A400                      call RestoreKB
    73                                      Exit
    30 0000006F B44C                <1>  mov ah, DOS_EXIT_CMD
    31 00000071 CD21                <1>  int DOS_IRQ
    74                                  
    75                                  convertPosition: ; ax contains x in al and y in ah  
    76 00000073 51                          push cx 
    77 00000074 88E1                        mov cl, ah
    78 00000076 D0E0                        shl al,1 
    79 00000078 80F900                      cmp cl,0 
    80 0000007B 7409                        jz .endOfFunc 
    81 0000007D 30E4                        xor ah,ah
    82                                  .loop: 
    83 0000007F 05A000                      add ax,160 
    84 00000082 FEC9                        dec cl 
    85 00000084 75F9                        jnz .loop 
    86                                  .endOfFunc:
    87 00000086 59                          pop cx
    88 00000087 C3                          ret 
    89                                       
    90                                  DrawLineH: ; ax contains starting position, cx should contain length  
    91                                  .loop:
    92                                      SetChar Green_Txt, Block_ASC
    13 00000088 50                  <1>  push ax
    14 00000089 1E                  <1>  push ds
    15 0000008A BB00B8              <1>  mov bx, VGA_TEXT_BUFFER
    16 0000008D 8EDB                <1>  mov ds,bx
    17 0000008F E8E1FF              <1>  call convertPosition
    18 00000092 89C3                <1>  mov bx,ax
    19 00000094 B8DB0A              <1>  mov ax, %1|%2
    20 00000097 8907                <1>  mov [bx],ax
    21 00000099 1F                  <1>  pop ds
    22 0000009A 58                  <1>  pop ax
    23                              <1> 
    93 0000009B FEC0                        inc al 
    94 0000009D 49                          dec cx
    95 0000009E 75E8                        jnz .loop 
    96 000000A0 C3                          ret 
    97                                  
    98                                  DrawLineV: ; ax start (ah:y, al:x), cx: length  
    99                                    .loop:
   100                                    SetChar Green_Txt, Block_ASC
    13 000000A1 50                  <1>  push ax
    14 000000A2 1E                  <1>  push ds
    15 000000A3 BB00B8              <1>  mov bx, VGA_TEXT_BUFFER
    16 000000A6 8EDB                <1>  mov ds,bx
    17 000000A8 E8C8FF              <1>  call convertPosition
    18 000000AB 89C3                <1>  mov bx,ax
    19 000000AD B8DB0A              <1>  mov ax, %1|%2
    20 000000B0 8907                <1>  mov [bx],ax
    21 000000B2 1F                  <1>  pop ds
    22 000000B3 58                  <1>  pop ax
    23                              <1> 
   101 000000B4 FEC4                      inc ah 
   102 000000B6 49                        dec cx 
   103 000000B7 75E8                      jnz .loop 
   104 000000B9 C3                        ret 
   105                                  
   106                                  
   107                                  drawDiagonal:
   108 000000BA B91400                      mov cx, 20 
   109 000000BD B400                        mov ah,0
   110 000000BF B000                        mov al,0 
   111                                  .loop:
   112 000000C1 50                          push ax 
   113 000000C2 E8AEFF                      call convertPosition
   114 000000C5 89C3                        mov bx,ax
   115 000000C7 B8DB0A                      mov ax, 0x0A00|Block_ASC
   116 000000CA 8907                        mov [bx],ax 
   117 000000CC 58                          pop ax 
   118 000000CD 050101                      add ax, 0x0101 
   119 000000D0 49                          dec cx 
   120 000000D1 75EE                        jnz .loop
   121 000000D3 C3                          ret
   122                                  
   123                                  clearScreen:
   124 000000D4 1E                        push ds 
   125 000000D5 53                          push bx 
   126 000000D6 BB00B8                        mov bx, VGA_TEXT_BUFFER 
   127 000000D9 8EDB                          mov ds,bx 
   128 000000DB 5B                          pop bx
   129 000000DC 51                          push cx
   130 000000DD 50                            push ax 
   131 000000DE B800B8                          mov ax, VGA_TEXT_BUFFER
   132 000000E1 8EC0                            mov es, ax 
   133 000000E3 B9D007                          mov cx, 80*25 
   134 000000E6 B80000                          mov ax, 0 
   135 000000E9 89C7                            mov di, ax 
   136 000000EB B80000                          mov ax, 0x0 
   137 000000EE F3AB                            rep stosw
   138 000000F0 58                            pop ax
   139 000000F1 59                          pop cx 
   140 000000F2 1F                        pop ds 
   141 000000F3 C3                        ret 
   142                                  
   143                                  %include "c:\libs\kb.asm"
   144 000000F4 0000                <1> OldKBHandler:	DW	0
   145 000000F6 0000                <1> OldKBSeg:	DW	0
   146                              <1> 
   147 000000F8 06                  <1> InstallKB:	PUSH	ES
   148 000000F9 53                  <1> 		PUSH	BX
   149 000000FA 52                  <1> 		PUSH	DX
   150                              <1> 		; backup old KB interrupt
   151 000000FB B80935              <1> 		MOV	AX, 0x3509			; get interrupt 9
   152 000000FE CD21                <1> 		INT	0x21
   153 00000100 891E[F400]          <1> 		MOV	[OldKBHandler], BX
   154 00000104 8C06[F600]          <1> 		MOV	[OldKBSeg], ES
   155                              <1> 		; install new KB interrupt
   156 00000108 B425                <1> 		MOV	AH, 0x25
   157 0000010A BA[2501]            <1> 		MOV	DX, KBHandler
   158 0000010D CD21                <1> 		INT	0x21
   159 0000010F 5A                  <1> 		POP	DX
   160 00000110 5B                  <1> 		POP	BX
   161 00000111 07                  <1> 		POP	ES
   162 00000112 C3                  <1> 		RET
   163                              <1> 
   164 00000113 52                  <1> RestoreKB:	PUSH	DX
   165 00000114 1E                  <1> 		PUSH	DS
   166 00000115 B80925              <1> 		MOV	AX, 0x2509
   167 00000118 8B16[F400]          <1> 		MOV	DX, [OldKBHandler]
   168 0000011C 8E1E[F600]          <1> 		MOV	DS, [OldKBSeg]
   169 00000120 CD21                <1> 		INT	0x21
   170 00000122 1F                  <1> 		POP	DS
   171 00000123 5A                  <1> 		POP	DX
   172 00000124 C3                  <1> 		RET
   173                              <1> 
   174 00000125 50                  <1> KBHandler:	PUSH	AX
   175 00000126 53                  <1> 		push bx 
   176 00000127 56                  <1>     push si 
   177                              <1> 		
   178 00000128 C606[6901]00        <1> 		mov byte [controlByte],0 ; reset control byte 
   179 0000012D E460                <1> 		IN	AL, 0x60			; get key event
   180 0000012F 3C01                <1> 		CMP	AL, 0x01			; ESC pressed?
   181 00000131 7503                <1> 		JNE	.testDirs
   182 00000133 A2[6701]            <1> 		MOV	[Quit], AL
   183 00000136 BE0000              <1> .testDirs: MOV si,0
   184 00000139 B404                <1> 	mov ah,4
   185 0000013B 3A84[6A01]          <1> .testLoop: cmp al, [movDir+SI]
   186 0000013F 740E                <1> 	JE .writeCommand
   187 00000141 46                  <1> 	inc si 
   188 00000142 FECC                <1> 	dec ah 
   189 00000144 75F5                <1> 	jnz .testLoop 
   190 00000146 B300                <1> 	mov bl,0 
   191 00000148 C606[6801]00        <1>   mov byte [lastInput],0
   192 0000014D EB11                <1>   jmp .done
   193                              <1> 
   194                              <1> .writeCommand:
   195 0000014F 8A1E[6801]          <1>   mov bl,[lastInput]
   196 00000153 30C3                <1>   xor bl,al; should be zero if al is equal to bl  
   197 00000155 80FB00              <1>   cmp bl,0 
   198 00000158 7406                <1>   jz .done 
   199 0000015A A2[6901]            <1> 	mov byte [controlByte],al 
   200 0000015D A2[6801]            <1>   mov byte [lastInput],al 	
   201 00000160 B020                <1> .done:		MOV	AL, 0x20			; ACK
   202 00000162 E620                <1> 		OUT	0x20, AL			; send ACK
   203 00000164 5E                  <1>  		pop si
   204 00000165 58                  <1> 		POP	AX
   205                              <1> 		
   206 00000166 CF                  <1> 		IRET
   207 00000167 00                  <1> Quit: DB 0x00
   208 00000168 00                  <1> lastInput: DB 0x00 
   209 00000169 00                  <1> controlByte: DB 0x00
   210 0000016A 484B4D50            <1> movDir: DB 72,75,77,80 ; up left right down
   144                                  
   145                                  .data:
   146 0000016E 0000                      QHead: dw 0x000  
   147 00000170 0000                      QTail: dw 0x000 
   148 00000172 FF00                      Vector: db -1,0 
   149 00000174 1010                      Pos: dw 0x1010
   150 00000176 00                        timer: db 0x00
   151 00000177 0000<rep 7D0h>            SnakeQueue: times 80*25 dw 0x00
   152                                  
