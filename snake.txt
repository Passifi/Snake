     1                                      bits 16
     2                                      org 0x100
     3                                  %include "macros.asm"
     4                              <1> SCREEN_WIDTH equ 320 
     5                              <1> SETCOLORREGISTER_CMD equ 0x1010
     6                              <1> SetColorRegisterBlock equ 0x1012 
     7                              <1> VGA_SCREEN_MEMORY equ 0xA000
     8                              <1> VGA_TEXT_BUFFER equ 0xB800
     9                              <1> VGA_STATUS_PORT equ 0x03DA
    10                              <1> VGA_RETRACE equ 0x08
    11                              <1> VGA_IRQ equ 0x10 
    12                              <1> VGA_TEXT_MODE equ 0x03 
    13                              <1> MODE_13 equ 0x0013
    14                              <1> DOS_WAIT_FOR_KEY_CMD equ 0x07
    15                              <1> DOS_STD_OUT_CHR equ 0x02 ;use DL for character value 
    16                              <1> DOS_EXIT_CMD equ 0x4c
    17                              <1> DOS_MEM_ALLOC_CMD equ 0x48 ; bx number of paragraphs (16bytes) ax has the segment address
    18                              <1> DOS_FREE_MEM_CMD equ 0x49 
    19                              <1> DOS_GET_INT_VEC equ 0x00
    20                              <1> DOS_SET_INT_VEC equ 0x25 ; AL carries the int number and DS:DX should contain the interrupt handler 
    21                              <1> 
    22                              <1> DOS_IRQ equ 0x21 
    23                              <1> DOS_READ_FILE equ 0x3f  ; BX files handle, cx number of byte to read ;ds:dx address buffer
    24                              <1> DOS_OPEN_FILE equ 0x3d00 ; al access control ah irq request, ds:dx pointer to filename
    25                              <1> OPEN_ACCESS_READWRITE equ 0x02 ; 
    26                              <1> 
    27                              <1> KB_PORT equ 0x60
    28                              <1> KB_ACK equ 0x20
    29                              <1> %macro Exit 0 
    30                              <1>     mov ah, DOS_EXIT_CMD
    31                              <1>     int DOS_IRQ
    32                              <1> %endm 
    33                              <1> 
    34                              <1> %macro Free 0 
    35                              <1>     mov es, ax 
    36                              <1>     mov ah, DOS_FREE_MEM_CMD
    37                              <1>     int DOS_IRQ
    38                              <1> %endm 
    39                              <1> 
    40                              <1> %macro cls 0
    41                              <1>     mov ah, DOS_STD_OUT_CHR 
    42                              <1>     mov dl, 27 
    43                              <1>     int DOS_IRQ
    44                              <1>     mov dl,'[' 
    45                              <1>     int DOS_IRQ
    46                              <1>     mov dl,'2' 
    47                              <1>     int DOS_IRQ 
    48                              <1>     mov dl,'J' 
    49                              <1>     int DOS_IRQ
    50                              <1> %endm 
     4                                  Up_Key equ 72 
     5                                  Right_Key equ 77 
     6                                  Left_Key equ 75 
     7                                  Down_Key equ 80
     8                                  Col equ 80
     9                                  Row equ 25
    10                                  Block_ASC equ 219
    11                                  Green_Txt equ 0x0a00 
    12                                  %macro SetChar 2  
    13                                    push ax
    14                                      push ds 
    15                                      mov bx, VGA_TEXT_BUFFER 
    16                                      mov ds,bx 
    17                                      call convertPosition
    18                                      mov bx,ax 
    19                                      mov ax, %1|%2 
    20                                      mov [bx],ax
    21                                      pop ds 
    22                                    pop ax 
    23                                  
    24                                  %endm     
    25                                  
    26                                  start:
    27 00000000 E81301                      call InstallKB 
    28 00000003 E8DA00                      call clearScreen
    29 00000006 B81000                      mov ax, 0x0010
    30 00000009 50                          push ax  
    31                                  .loop:
    32 0000000A 58                          pop ax
    33 0000000B E8F200                      call WaitFrame 
    34 0000000E 8B1E[8501]                  mov bx,[Vector]
    35 00000012 00FC                        add ah,bh 
    36 00000014 00D8                        add al,bl
    37 00000016 50                          push ax
    38                                      SetChar Green_Txt,Block_ASC
    13 00000017 50                  <1>  push ax
    14 00000018 1E                  <1>  push ds
    15 00000019 BB00B8              <1>  mov bx, VGA_TEXT_BUFFER
    16 0000001C 8EDB                <1>  mov ds,bx
    17 0000001E E85E00              <1>  call convertPosition
    18 00000021 89C3                <1>  mov bx,ax
    19 00000023 B8DB0A              <1>  mov ax, %1|%2
    20 00000026 8907                <1>  mov [bx],ax
    21 00000028 1F                  <1>  pop ds
    22 00000029 58                  <1>  pop ax
    23                              <1> 
    39 0000002A A0[7C01]                    mov al,[controlByte]
    40                                      
    41 0000002D 3C4D                        cmp al, Right_Key
    42 0000002F 750D                        jnz .leftTest
    43 00000031 C606[7C01]00                mov byte [controlByte],0
    44 00000036 C706[8501]0100              mov word [Vector],0x0001 
    45                                      
    46 0000003C EBCC                        jmp .loop
    47                                  .leftTest:
    48 0000003E 3C4B                      cmp al, Left_Key
    49 00000040 750D                      jnz .UpTest 
    50 00000042 C606[7C01]00              mov byte [controlByte],0
    51 00000047 C706[8501]FF00            mov word [Vector],0x00ff
    52 0000004D EBBB                      jmp .loop
    53                                  .UpTest:
    54 0000004F 3C48                      cmp al, Up_Key
    55 00000051 750D                      jnz .DownTest
    56 00000053 C606[7C01]00              mov byte [controlByte],0
    57 00000058 C706[8501]00FF            mov word [Vector],0xff00
    58 0000005E EBAA                      jmp .loop
    59                                  .DownTest:
    60 00000060 3C50                      cmp al, Down_Key 
    61 00000062 750D                      jnz .exitTest
    62 00000064 C606[7C01]00              mov byte [controlByte],0
    63 00000069 C706[8501]0001            mov word [Vector],0x0100
    64 0000006F EB99                      jmp .loop
    65                                  .exitTest:
    66 00000071 A0[7A01]                    mov al,[Quit] 
    67 00000074 3C01                        cmp al,1
    68 00000076 7592                        jnz .loop
    69 00000078 E8B800                      call RestoreKB
    70                                      Exit
    30 0000007B B44C                <1>  mov ah, DOS_EXIT_CMD
    31 0000007D CD21                <1>  int DOS_IRQ
    71                                  
    72                                  convertPosition: ; ax contains x in al and y in ah  
    73 0000007F 51                          push cx 
    74 00000080 88E1                        mov cl, ah
    75 00000082 D0E0                        shl al,1 
    76 00000084 80F900                      cmp cl,0 
    77 00000087 7409                        jz .endOfFunc 
    78 00000089 30E4                        xor ah,ah
    79                                  .loop: 
    80 0000008B 05A000                      add ax,160 
    81 0000008E FEC9                        dec cl 
    82 00000090 75F9                        jnz .loop 
    83                                  .endOfFunc:
    84 00000092 59                          pop cx
    85 00000093 C3                          ret 
    86                                       
    87                                  DrawLineH: ; ax contains starting position, cx should contain length  
    88                                  .loop:
    89                                      SetChar Green_Txt, Block_ASC
    13 00000094 50                  <1>  push ax
    14 00000095 1E                  <1>  push ds
    15 00000096 BB00B8              <1>  mov bx, VGA_TEXT_BUFFER
    16 00000099 8EDB                <1>  mov ds,bx
    17 0000009B E8E1FF              <1>  call convertPosition
    18 0000009E 89C3                <1>  mov bx,ax
    19 000000A0 B8DB0A              <1>  mov ax, %1|%2
    20 000000A3 8907                <1>  mov [bx],ax
    21 000000A5 1F                  <1>  pop ds
    22 000000A6 58                  <1>  pop ax
    23                              <1> 
    90 000000A7 FEC0                        inc al 
    91 000000A9 49                          dec cx
    92 000000AA 75E8                        jnz .loop 
    93 000000AC C3                          ret 
    94                                  
    95                                  DrawLineV: ; ax start (ah:y, al:x), cx: length  
    96                                    .loop:
    97                                    SetChar Green_Txt, Block_ASC
    13 000000AD 50                  <1>  push ax
    14 000000AE 1E                  <1>  push ds
    15 000000AF BB00B8              <1>  mov bx, VGA_TEXT_BUFFER
    16 000000B2 8EDB                <1>  mov ds,bx
    17 000000B4 E8C8FF              <1>  call convertPosition
    18 000000B7 89C3                <1>  mov bx,ax
    19 000000B9 B8DB0A              <1>  mov ax, %1|%2
    20 000000BC 8907                <1>  mov [bx],ax
    21 000000BE 1F                  <1>  pop ds
    22 000000BF 58                  <1>  pop ax
    23                              <1> 
    98 000000C0 FEC4                      inc ah 
    99 000000C2 49                        dec cx 
   100 000000C3 75E8                      jnz .loop 
   101 000000C5 C3                        ret 
   102                                  
   103                                  
   104                                  drawDiagonal:
   105 000000C6 B91400                      mov cx, 20 
   106 000000C9 B400                        mov ah,0
   107 000000CB B000                        mov al,0 
   108                                  .loop:
   109 000000CD 50                          push ax 
   110 000000CE E8AEFF                      call convertPosition
   111 000000D1 89C3                        mov bx,ax
   112 000000D3 B8DB0A                      mov ax, 0x0A00|Block_ASC
   113 000000D6 8907                        mov [bx],ax 
   114 000000D8 58                          pop ax 
   115 000000D9 050101                      add ax, 0x0101 
   116 000000DC 49                          dec cx 
   117 000000DD 75EE                        jnz .loop
   118 000000DF C3                          ret
   119                                  
   120                                  clearScreen:
   121 000000E0 1E                        push ds 
   122 000000E1 53                          push bx 
   123 000000E2 BB00B8                        mov bx, VGA_TEXT_BUFFER 
   124 000000E5 8EDB                          mov ds,bx 
   125 000000E7 5B                          pop bx
   126 000000E8 51                          push cx
   127 000000E9 50                            push ax 
   128 000000EA B800B8                          mov ax, VGA_TEXT_BUFFER
   129 000000ED 8EC0                            mov es, ax 
   130 000000EF B9D007                          mov cx, 80*25 
   131 000000F2 B80000                          mov ax, 0 
   132 000000F5 89C7                            mov di, ax 
   133 000000F7 B80000                          mov ax, 0x0 
   134 000000FA F3AB                            rep stosw
   135 000000FC 58                            pop ax
   136 000000FD 59                          pop cx 
   137 000000FE 1F                        pop ds 
   138 000000FF C3                        ret 
   139                                  
   140                                  WaitFrame:	
   141 00000100 50                          push ax
   142 00000101 52                          PUSH	DX
   143                                  		; port 0x03DA contains VGA status
   144 00000102 BADA03                  		MOV	DX, 0x03DA
   145 00000105 EC                      .waitRetrace:	IN	AL, DX	
   146                                  					; read from status port
   147                                  		; bit 3 will be on if we're in retrace
   148 00000106 A808                    		TEST	AL, 0x08			; are we in retrace?
   149 00000108 75FB                    		JNZ	.waitRetrace
   150                                  		
   151 0000010A EC                      .endRefresh:	IN	AL, DX
   152 0000010B A808                    		TEST	AL, 0x08			; are we in refresh?
   153 0000010D 74FB                    		JZ	.endRefresh
   154 0000010F 5A                      		POP DX
   155 00000110 58                          pop ax
   156 00000111 C3                      		RET
   157                                  
   158                                  %include "c:\libs\kb.asm"
   159 00000112 0000                <1> OldKBHandler:	DW	0
   160 00000114 0000                <1> OldKBSeg:	DW	0
   161                              <1> 
   162 00000116 06                  <1> InstallKB:	PUSH	ES
   163 00000117 53                  <1> 		PUSH	BX
   164 00000118 52                  <1> 		PUSH	DX
   165 00000119 50                  <1>     push ax
   166                              <1> 		; backup old KB interrupt
   167 0000011A B80935              <1> 		MOV	AX, 0x3509			; get interrupt 9
   168 0000011D CD21                <1> 		INT	0x21
   169 0000011F 891E[1201]          <1> 		MOV	[OldKBHandler], BX
   170 00000123 8C06[1401]          <1> 		MOV	[OldKBSeg], ES
   171                              <1> 		; install new KB interrupt
   172 00000127 B425                <1> 		MOV	AH, 0x25
   173 00000129 BA[4501]            <1> 		MOV	DX, KBHandler
   174 0000012C CD21                <1> 		INT	0x21
   175 0000012E 58                  <1> 		pop ax
   176 0000012F 5A                  <1>     POP	DX
   177 00000130 5B                  <1> 		POP	BX
   178 00000131 07                  <1> 		POP	ES
   179 00000132 C3                  <1> 		RET
   180                              <1> 
   181 00000133 52                  <1> RestoreKB:	PUSH	DX
   182 00000134 1E                  <1> 		PUSH	DS
   183 00000135 B80925              <1> 		MOV	AX, 0x2509
   184 00000138 8B16[1201]          <1> 		MOV	DX, [OldKBHandler]
   185 0000013C 8E1E[1401]          <1> 		MOV	DS, [OldKBSeg]
   186 00000140 CD21                <1> 		INT	0x21
   187 00000142 1F                  <1> 		POP	DS
   188 00000143 5A                  <1> 		POP	DX
   189 00000144 C3                  <1> 		RET
   190                              <1> 
   191 00000145 50                  <1> KBHandler:	PUSH	AX
   192 00000146 53                  <1> 		push bx 
   193 00000147 56                  <1>     push si 
   194                              <1> 		
   195 00000148 C606[7C01]00        <1> 		mov byte [controlByte],0 ; reset control byte 
   196 0000014D E460                <1> 		IN	AL, 0x60			; get key event
   197 0000014F 3C01                <1> 		CMP	AL, 0x01			; ESC pressed?
   198 00000151 7503                <1> 		JNE	.testDirs
   199 00000153 A2[7A01]            <1> 		MOV	[Quit], AL
   200 00000156 BE0000              <1> .testDirs: MOV si,0
   201 00000159 B404                <1> 	mov ah,4
   202 0000015B 3A84[7D01]          <1> .testLoop: cmp al, [movDir+SI]
   203 0000015F 740E                <1> 	JE .writeCommand
   204 00000161 46                  <1> 	inc si 
   205 00000162 FECC                <1> 	dec ah 
   206 00000164 75F5                <1> 	jnz .testLoop 
   207 00000166 B300                <1> 	mov bl,0 
   208 00000168 C606[7B01]00        <1>   mov byte [lastInput],0
   209 0000016D EB03                <1>   jmp .done
   210                              <1> 
   211                              <1> .writeCommand:
   212 0000016F A2[7C01]            <1> 	mov byte [controlByte],al 
   213 00000172 B020                <1> .done:		MOV	AL, 0x20			; ACK
   214 00000174 E620                <1> 		OUT	0x20, AL			; send ACK
   215 00000176 5E                  <1>  		pop si
   216 00000177 5B                  <1>     pop bx 
   217 00000178 58                  <1> 		POP	AX
   218                              <1> 		
   219 00000179 CF                  <1> 		IRET
   220 0000017A 00                  <1> Quit: DB 0x00
   221 0000017B 00                  <1> lastInput: DB 0x00 
   222 0000017C 00                  <1> controlByte: DB 0x00
   223 0000017D 484B4D50            <1> movDir: DB 72,75,77,80 ; up left right down
   159                                  .data:
   160 00000181 0000                      QHead: dw 0x000  
   161 00000183 0000                      QTail: dw 0x000 
   162 00000185 0001                      Vector: dw 0x0100 
   163 00000187 1010                      Pos: dw 0x1010
   164 00000189 00                        timer: db 0x00
   165 0000018A 0000<rep 7D0h>            SnakeQueue: times 80*25 dw 0x00
   166                                  
